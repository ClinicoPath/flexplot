hist(funding)
curve(x^3-3*x, -2, 2)
curve(log(x), 0,20)
curve(log(x), 0,20, xaxt="n")
curve(log(x), 0,20, xaxt="n", xlab="Complexity")
curve(log(x), 0,20, xaxt="n", xlab="Complexity", ylab="Fit")
curve(log(x), 0,20, xaxt="n", xlab="Complexity", ylab="Fit", yaxt="n")
curve(log(x), 0,20, xaxt="n", xlab="Complexity", ylab="Fit", yaxt="n", ylim=c(0,8))
curve(log(x), 0,20, xaxt="n", xlab="Complexity", ylab="Fit", yaxt="n", ylim=c(0,4))
curve(log(x), 0,20, xaxt="n", xlab="Complexity", ylab="Fit", yaxt="n", ylim=c(-4,4))
curve(log(x), 0,20, xaxt="n", xlab="Complexity", ylab="Fit", yaxt="n", ylim=c(-1,4))
curve(log(x), 0,20, xaxt="n", xlab="Complexity", ylab="Fit", yaxt="n", ylim=c(0,4))
curve(log(x), 0,20, xaxt="n", xlab="Complexity", ylab="Fit", yaxt="n", ylim=c(-2,4))
op <- par(mfrow = c(2,1), mgp = c(2,.8,0), mar = .1+c(3,3,3,1))#
n <- 9#
x <- 1:n#
y <- rnorm(n)#
plot(x, y, main = paste("spline[fun](.) through",n,"points"))
lines(spline(x, y))
d = data.frame(x=1:20, y=c(log(1:10), -.5*11:20))#
plot(d)
d = data.frame(x=1:20, y=c(log(1:10), 12+-.5*11:20))
plot(d)
d = data.frame(x=1:20, y=c(log(1:10), 4+-.5*11:20))
plot(d)
d = data.frame(x=1:20, y=c(log(1:10), 6+-.5*11:20))
plot(d)
d = data.frame(x=1:20, y=c(log(1:10), 8+-.5*11:20))#
plot(d)
d = data.frame(x=1:20, y=c(log(1:10), 8+-.25*11:20))#
plot(d)
log(10)
-.25*11
d = data.frame(x=1:20, y=c(log(1:10), 2.75+2.3+-.25*11:20))
plot(d)
ggplot(data=d, aes(x=x, y=y)) + geom_line()
d = data.frame(x=1:20, y=c(log(1:10), 2.75+2.3+-.05*11:20))#
plot(d)
log(10)
slope*11
slope = -0.05#
int = slope*11
int
int = slope*11 + log(10)
int
d = data.frame(x=1:20, y=c(log(1:10), int+-.05*11:20))#
log(10)#
plot(d)
slope = -0.05#
int = slope*11 + log(10)#
d = data.frame(x=1:20, y=c(log(1:10), int+-.05*11:20))#
log(10)#
plot(d)
slope*11
slope = -0.05#
int = -1*slope*11 + log(10)#
d = data.frame(x=1:20, y=c(log(1:10), int+slope*11:20))
log(10)#
plot(d)
ggplot(data=d, aes(x=x, y=y)) + geom_line()
ggplot(data=d, aes(x=x, y=y)) + geom_smooth()
ggplot(data=d, aes(x=x, y=y)) + geom_smooth(se=F)
ggplot(data=d, aes(x=x, y=y)) + geom_smooth(se=F) + theme_bw() + labs(x="complexity", y="fit") +theme(#
  axis.text.x = element_blank(),#
  axis.text.y = element_blank(),#
  axis.ticks = element_blank())
getwd()
ggsave(plot=plot, filename="/Users/fife/Google Drive/images/complexity.jpg", width=6, height=4)
plot = ggplot(data=d, aes(x=x, y=y)) + geom_smooth(se=F) + theme_bw() + labs(x="complexity", y="fit") +theme(#
  axis.text.x = element_blank(),#
  axis.text.y = element_blank(),#
  axis.ticks = element_blank())#
  ggsave(plot=plot, filename="/Users/fife/Google Drive/images/complexity.jpg", width=6, height=4)
plot = ggplot(data=d, aes(x=x, y=y)) + geom_smooth(se=F) + theme_bw() + labs(x="complexity", y="fit") +theme(#
  axis.text.x = element_blank(),#
  axis.text.y = element_blank(),#
  axis.ticks = element_blank(),#
  panel.grid.major = element_blank())
plot
plot = ggplot(data=d, aes(x=x, y=y)) + geom_smooth(se=F) + theme_bw() + labs(x="complexity", y="fit") +theme(#
  axis.text.x = element_blank(),#
  axis.text.y = element_blank(),#
  axis.ticks = element_blank(),#
  panel.grid.major = element_blank(),#
   panel.grid.minor = element_blank())
ggsave(plot=plot, filename="/Users/fife/Google Drive/images/complexity.jpg", width=6, height=4)
plot = ggplot(data=d, aes(x=x, y=y)) + geom_smooth(se=F) + theme_bw() + labs(x="complexity", y="fit") +theme(#
  axis.text.x = element_blank(),#
  axis.text.y = element_blank(),#
  axis.ticks = element_blank(),#
  panel.grid.major = element_blank(),#
   panel.grid.minor = element_blank())
plot
require(fifer)
data(exercise_data)
d = exercise_data
head(d)
flexplot(weight.loss~therapy.type + muscle.gain, data=d)
flexplot(weight.loss~muscle.gain + therapy.type , data=d)
added.plot(weight.loss~therapy.type + muscle.gain, data=d)
full = 	lm(weight.loss~muscle.gain + therapy.type, data=d)
full
full = 	lm(weight.loss~muscle.gain + therapy.type, data=d)#
reduced = 	lm(weight.loss~therapy.type, data=d)#
model.comparison(full, reduced)
flexplot(weight.loss~muscle.gain + therapy.type, data=d)
added.plot(weight.loss~therapy.type + muscle.gain, data=d)
model.comparison(full, reduced)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(70, -.15, -.11, -.09), sd=c(10, .15, .15, .15, .05), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2)#
head(d)#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)
funding= runif(nrow(d), 0, 100)
plot(funding, d$test.score)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(70, -.15, -.11, -.09), sd=c(10, .15, .15, .15, .05), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2)#
head(d)#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
d$funding= runif(nrow(d), 0, 100)#
#
d$test.score = d$test.score + 1.5*log(funding)#
flexplot(test.score~funding, data=d)
d$funding= runif(nrow(d), 0, 100)#
flexplot(test.score~funding, data=d)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(70, -.15, -.11, -.09), sd=c(10, .15, .15, .15, .05), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2)#
head(d)#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
d$funding= runif(nrow(d), 0, 100)#
flexplot(test.score~funding, data=d)
hist(d$funding)
hist(d$test.score)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(70, -.15, -.11, -.09), sd=c(10, .15, .15, .15, .05), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2)#
head(d)#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
hist(d$test.score)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(70, -.15, -.11, -.09), sd=c(10, .15, .15, .15, .05), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2)#
hist(d$test.score)
hist(d$test.score)
require(fifer); require(flexplot)#
clear()#
set.seed(12112)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(70, -.15, -.11, -.09), sd=c(10, .15, .15, .15, .05), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2)#
hist(d$test.score)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, .15, .15, .15, .05), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2)#
hist(d$test.score)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, .15, .15, .15, .05), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2, cap=c(0,100))#
hist(d$test.score)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, .15, .15, .15, .05), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2, cap=c(0,100))#
#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
d$funding= runif(nrow(d), 0, 100)#
#
d$test.score = d$test.score + 1.5*log(funding)#
flexplot(test.score~funding, data=d)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, .15, .15, .15, .05), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2, cap=c(0,100))#
#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
d$funding= runif(nrow(d), 0, 100)#
#
d$test.score = .5*d$test.score + 1.5*log(funding)#
flexplot(test.score~funding, data=d)
d = make.data(means=c(80, 78, 77, 76), sd=c(10, 10, 10, 5), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2, cap=c(0,100))#
#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
d$funding= runif(nrow(d), 0, 100)#
#
d$test.score = .5*d$test.score + 1.5*log(funding)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, 10, 10, 5), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2, cap=c(0,100))
d$funding= runif(nrow(d), 0, 100)
d$test.score = .5*d$test.score + 1.5*log(d$funding)
flexplot(test.score~funding, data=d)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, 10, 10, 5), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2, cap=c(0,100))#
#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
d$funding= runif(nrow(d), 0, 100)#
#
d$test.score = d$test.score + 1.5*log(d$funding)#
flexplot(test.score~funding, data=d)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, 10, 10, 5), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2, cap=c(0,100))#
#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
d$funding= runif(nrow(d), 0, 100)#
#
d$test.score = d$test.score + 2.5*log(d$funding)#
flexplot(test.score~funding, data=d)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, 10, 10, 5), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2, cap=c(0,100))#
#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
d$funding= runif(nrow(d), 0, 100)#
#
d$test.score = d$test.score + 9.5*log(d$funding)#
flexplot(test.score~funding, data=d)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, 10, 10, 5), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2, cap=c(0,100))#
#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
d$funding= runif(nrow(d), 0, 100)#
#
d$test.score = d$test.score - 30 + 9.5*log(d$funding)#
flexplot(test.score~funding, data=d)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, 10, 10, 5), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2)#
#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
d$funding= runif(nrow(d), 0, 100)#
#
d$test.score = d$test.score - 30 + 9.5*log(d$funding)#
flexplot(test.score~funding, data=d)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, 10, 10, 5), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2)#
#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
d$funding= runif(nrow(d), 0, 100)#
#
d$test.score = d$test.score - 40 + 9.5*log(d$funding)#
flexplot(test.score~funding, data=d)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
		### groups = standard instruction, student-centered, content-centered, flipped classroom#
		### outcome = grade change (GPA) - zero-inflated#
		### funding = amount spent on training#
		### but, make it so the difference is super overshadowed by the trend#
d = make.data(means=c(80, 78, 77, 76), sd=c(10, 10, 10, 5), n = c(3555, 262, 177, 178), names=c("test.score", "instruction.method"), groups = c("lecture", "student", "content", "flipped"), digits=2)#
#
		### make d zero inflated#
#d$gpa.change = .25*d$gpa.change + .75*d$gpa.change^2#
#
		##### make funding variable (price per student on research, mean = 12, sd=4)#
piece = function(x){#
	out = x#
	if (x<50){#
		out = (x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}
d$funding= piece(d$test.score)#
#
#d$test.score = d$test.score - 40 + 9.5*log(d$funding)#
flexplot(test.score~funding, data=d)
d$funding = rnorm(nrow(d), 50, 15)
funding = rnorm(nrow(d), 50, 15)
funding = rnorm(nrow(d), 50, 15)#
gpa.change = piece(x)
gpa.change = piece(funding)
gpa.change = lapply(funding, piece)
gpa.change
gpa.change = unlist(lapply(funding, piece))
gpa.change
plot(funding, gpa.change)
piece = function(x){#
	out = x#
	if (x<50){#
		out = (-x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}
piece = function(x){#
	out = x#
	if (x<50){#
		out = -(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
d$funding= piece(d$test.score)#
#
#d$test.score = d$test.score - 40 + 9.5*log(d$funding)#
flexplot(test.score~funding, data=d)#
### start over!#
#
funding = rnorm(nrow(d), 50, 15)#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
##### make funding variable (price per student on research, mean = 12, sd=4)#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -(x-50)^2 + 80*50^2#
	} else {#
		out = 80#
	}#
}#
d$funding= piece(d$test.score)#
#
#d$test.score = d$test.score - 40 + 9.5*log(d$funding)#
flexplot(test.score~funding, data=d)#
### start over!#
#
funding = rnorm(nrow(d), 50, 15)#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
piece = function(x){#
	out = x#
	if (x<50){#
		out = (x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
d$funding= piece(d$test.score)#
#
#d$test.score = d$test.score - 40 + 9.5*log(d$funding)#
flexplot(test.score~funding, data=d)
piece = function(x){#
	out = x#
	if (x<50){#
		out = (x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = rnorm(nrow(d), 50, 15)#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
piece = function(x){#
	out = x#
	#if (x<50){#
		out = (x-50)^2 + 80#
	#} else {#
	#	out = 80#
	#}#
}#
funding = rnorm(nrow(d), 50, 15)#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
piece = function(x){#
	out = x#
	#if (x<50){#
		out = -(x-50)^2 + 80#
	#} else {#
	#	out = 80#
	#}#
}#
funding = rnorm(nrow(d), 50, 15)#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
piece = function(x){#
	out = x#
	#if (x<50){#
		out = -.5(x-50)^2 + 80#
	#} else {#
	#	out = 80#
	#}#
}#
funding = rnorm(nrow(d), 50, 15)#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
### start over!#
piece = function(x){#
	out = x#
	#if (x<50){#
		out = -10(x-50)^2 + 80#
	#} else {#
	#	out = 80#
	#}#
}#
funding = rnorm(nrow(d), 50, 15)#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
funding = 1:100#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
piece = function(x){#
	out = x#
	#if (x<50){#
		out = -10(x-50)^2 + 80#
	#} else {#
	#	out = 80#
	#}#
}#
funding = 1:100#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
funding = 1:100
funding
gpa.change = unlist(lapply(funding, piece))
gpa.change
unlist(lapply(funding, piece))
piece = function(x){#
	out = x#
	#if (x<50){#
		out = -10*(x-50)^2 + 80#
	#} else {#
	#	out = 80#
	#}#
}#
funding = 1:100#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
piece = function(x){#
	out = x#
	#if (x<50){#
		out = -1*(x-50)^2 + 80#
	#} else {#
	#	out = 80#
	#}#
}#
funding = 1:100#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
piece = function(x){#
	out = x#
	#if (x<50){#
		out = -.008*(x-50)^2 + 80#
	#} else {#
	#	out = 80#
	#}#
}#
funding = 1:100#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = 1:100#
gpa.change = unlist(lapply(funding, piece))#
plot(funding, gpa.change)
funding = sample(1:100, 1000, T, prob=rev(1:100))#
hist(funding)
funding = sample(1:100, 1000, T, prob=rev(1:100))#
#
gpa.change = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 15)#
plot(funding, gpa.change)
gpa.change = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 10)#
plot(funding, gpa.change)
gpa.change = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
plot(funding, gpa.change)
n = 3555 + 262 + 177 + 178
instruction = sample(c("lecture", "student", "content", "flipped"), c(3555, 262, 177, 178))
model.matrix(gpa.change~instruction)
instruction = sample(c("lecture", "student", "content", "flipped"), c(3555, 262, 177, 178), replace=T)#
model.matrix(gpa.change~instruction)
instruction
instruction = as.factor(sample(c("lecture", "student", "content", "flipped"), c(3555, 262, 177, 178), replace=T))
instruction
model.matrix(gpa.change~instruction)
funding = sample(1:100, length(n), T, prob=rev(1:100))#
gpa.change = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = as.factor(sample(c("lecture", "student", "content", "flipped"), c(3555, 262, 177, 178), replace=T))#
model.matrix(gpa.change~instruction)
length(n)
funding = sample(1:100, sum(n), T, prob=rev(1:100))#
gpa.change = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = as.factor(sample(c("lecture", "student", "content", "flipped"), c(3555, 262, 177, 178), replace=T))#
model.matrix(gpa.change~instruction)
length(instruction)
sum(n)
samples = c(3555, 262, 177, 178)
funding = sample(1:100, sum(samples), T, prob=rev(1:100))#
gpa.change = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)
samples = c(3555, 262, 177, 178)#
### start over!#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = sample(1:100, sum(samples), T, prob=rev(1:100))#
gpa.change = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = as.factor(sample(c("lecture", "student", "content", "flipped"), samples, replace=T))
model.matrix(gpa.change~instruction)
instruction
gpa.change
length(gpa.change)
length(instruction)
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))
length(instruction)
length(funding)
sum(samples)
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))[1:sum(samples)]#
gpa.change = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = as.factor(sample(c("lecture", "student", "content", "flipped"), samples, replace=T))#
model.matrix(gpa.change~instruction)
length(funding)
sum(samples)
samples
make.data
instruction = rep(c("lecture", "student", "content", "flipped"), times = samples)
instruction
model.matrix(gpa.change~instruction)
t(t(model.matrix(gpa.change~instruction)))
gpa.change = gpa.change + t(t(c(0, -4, -8, -6))) %*% t(t(model.matrix(gpa.change~instruction)))
dim(t(c(0, -4, -8, -6)))
dim(t(t(model.matrix(gpa.change~instruction))))
gpa.change = gpa.change + dim(t(c(0, -4, -8, -6))) %*% (t(model.matrix(gpa.change~instruction)))
dim(t(model.matrix(gpa.change~instruction)))
gpa.change = gpa.change + (t(c(0, -4, -8, -6))) %*% dim(t(model.matrix(gpa.change~instruction)))
dim(t(c(0, -4, -8, -6)))
t(c(0, -4, -8, -6))
dim(t(model.matrix(gpa.change~instruction)))
gpa.change = gpa.change + (t(c(0, -4, -8, -6))) %*% (t(model.matrix(gpa.change~instruction)))
flexplot(test.score~funding, data=d)
samples = c(3555, 262, 177, 178)#
### start over!#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))[1:sum(samples)]#
test.score = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = factor(rep(c("lecture", "student", "content", "flipped"), times = samples))#
instruction = relevel(instruction, ref="lecture")#
test.score = test.score + (t(c(0, -4, -8, -6))) %*% (t(model.matrix(test.score ~instruction)))#
#
flexplot(test.score~funding, data=d)
d = data.frame(test.score = test.score, funding=funding, instruction=instruction)
flexplot(test.score~funding, data=d)
head(d)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
samples = c(3555, 262, 177, 178)#
### start over!#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))[1:sum(samples)]#
test.score = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = factor(rep(c("lecture", "student", "content", "flipped"), times = samples))#
instruction = relevel(instruction, ref="lecture")#
test.score = t(test.score + (t(c(0, -4, -8, -6))) %*% (t(model.matrix(test.score ~instruction))))#
d = data.frame(test.score = test.score, funding=funding, instruction=instruction)#
head(d)
flexplot(test.score~funding, data=d)
flexplot(test.score~instruction, data=d)
flexplot(test.score~instruction, data=d, sample=200)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
samples = c(3555, 262, 177, 178)#
### start over!#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))[1:sum(samples)]#
test.score = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = factor(rep(c("lecture", "student", "content", "flipped"), times = samples))#
instruction = relevel(instruction, ref="lecture")#
test.score = t(test.score + (t(c(0, -2, -6, -4))) %*% (t(model.matrix(test.score ~instruction))))#
d = data.frame(test.score = test.score, funding=funding, instruction=instruction)#
d$test.score[d$test.score>100] = 100#
flexplot(test.score~funding, data=d)#
flexplot(test.score~instruction, data=d, sample=200)
lm(test.score~funding, data=d)
summary(lm(test.score~funding, data=d))
summary(lm(test.score~instruction, data=d))
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
samples = c(3555, 262, 177, 178)#
### start over!#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))[1:sum(samples)]#
test.score = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = factor(rep(c("lecture", "student", "content", "flipped"), times = samples))#
instruction = relevel(instruction, ref="lecture")#
test.score = t(test.score + (t(c(0, -2, -6, -4))) %*% (t(model.matrix(test.score ~instruction))))#
d = data.frame(test.score = test.score, funding=funding, instruction=instruction)#
d$test.score[d$test.score>100] = 100#
flexplot(test.score~funding, data=d)#
flexplot(test.score~instruction, data=d, sample=400)
summary(lm(test.score~instruction, data=d[1:400]))
summary(lm(test.score~instruction, data=d[1:400,]))
d[1:400,]
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
samples = c(3555, 262, 177, 178)#
### start over!#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))[1:sum(samples)]#
test.score = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = factor(rep(c("lecture", "student", "content", "flipped"), times = samples))#
instruction = relevel(instruction, ref="lecture")#
test.score = t(test.score + (t(c(0, -2, -6, -4))) %*% (t(model.matrix(test.score ~instruction))))#
d = data.frame(test.score = test.score, funding=funding, instruction=instruction)#
d$test.score[d$test.score>100] = 100#
flexplot(test.score~funding, data=d)#
flexplot(test.score~instruction, data=d, sample=400)#
#
summary(lm(test.score~instruction, data=d[1:400,]))
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
samples = c(1555, 262, 177, 178)#
### start over!#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))[1:sum(samples)]#
test.score = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = factor(rep(c("lecture", "student", "content", "flipped"), times = samples))#
instruction = relevel(instruction, ref="lecture")#
test.score = t(test.score + (t(c(0, -2, -6, -4))) %*% (t(model.matrix(test.score ~instruction))))#
d = data.frame(test.score = test.score, funding=funding, instruction=instruction)#
d$test.score[d$test.score>100] = 100#
flexplot(test.score~funding, data=d)#
flexplot(test.score~instruction, data=d, sample=400)#
#
summary(lm(test.score~instruction, data=d[1:400,]))
anova(lm(test.score~instruction, data=d[1:400,]))
flexplot(test.score~instruction, data=d, sample=400)
anova(lm(test.score~instruction, data=d))
summary(lm(test.score~instruction, data=d))
flexplot(test.score~instruction, data=d, alpha=.3)
flexplot(test.score~instruction, data=d, alpha=.1)
flexplot(test.score~instruction, data=d, alpha=.1, col="red")
q = d[1:500,]#
summary(lm(test.score~instruction, data=d))
summary(lm(test.score~instruction, data=q))
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
samples = c(1555, 262, 177, 178)#
### start over!#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))[1:sum(samples)]#
test.score = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = sample(factor(rep(c("lecture", "student", "content", "flipped"), times = samples)), size=sum(samples))#
instruction = relevel(instruction, ref="lecture")#
test.score = t(test.score + (t(c(0, -2, -6, -4))) %*% (t(model.matrix(test.score ~instruction))))#
d = data.frame(test.score = test.score, funding=funding, instruction=instruction)#
d$test.score[d$test.score>100] = 100#
flexplot(test.score~funding, data=d)#
flexplot(test.score~instruction, data=d, alpha=.1, col="red")#
q = d[1:500,]#
summary(lm(test.score~instruction, data=q))
sum(samples)
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
samples = c(.25*1555, .25*262, .25*177, .25*178)#
#
### start over!#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))[1:sum(samples)]#
test.score = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = sample(factor(rep(c("lecture", "student", "content", "flipped"), times = samples)), size=sum(samples))#
instruction = relevel(instruction, ref="lecture")#
test.score = t(test.score + (t(c(0, -2, -6, -4))) %*% (t(model.matrix(test.score ~instruction))))#
d = data.frame(test.score = test.score, funding=funding, instruction=instruction)#
d$test.score[d$test.score>100] = 100#
flexplot(test.score~funding, data=d)#
flexplot(test.score~instruction, data=d, alpha=.1, col="red")
require(fifer); require(flexplot)#
clear()#
set.seed(1212)#
samples = c(.25*1555, .25*262, .25*177, .25*178)#
#
### start over!#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))[1:sum(samples)]
test.score = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)
instruction = sample(factor(rep(c("lecture", "student", "content", "flipped"), times = samples)), size=sum(samples))
sum(samples)
instruction = sample(factor(rep(c("lecture", "student", "content", "flipped"), times = samples)), size=length(test.score))
length(test.score
samples
samples = round(c(.25*1555, .25*262, .25*177, .25*178))#
#
### start over!#
piece = function(x){#
	out = x#
	if (x<50){#
		out = -.008*(x-50)^2 + 80#
	} else {#
		out = 80#
	}#
}#
funding = sample(1:100, size=sum(samples), T, prob=rev(1:100))[1:sum(samples)]#
test.score = unlist(lapply(funding, piece)) + rnorm(length(funding), 0, 8)#
instruction = sample(factor(rep(c("lecture", "student", "content", "flipped"), times = samples)), size=length(test.score))
instruction = relevel(instruction, ref="lecture")#
test.score = t(test.score + (t(c(0, -2, -6, -4))) %*% (t(model.matrix(test.score ~instruction))))#
d = data.frame(test.score = test.score, funding=funding, instruction=instruction)#
d$test.score[d$test.score>100] = 100#
flexplot(test.score~funding, data=d)#
flexplot(test.score~instruction, data=d, alpha=.1, col="red")
summary(lm(test.score~instruction, data=d))
flexplot(gpa.change~funding|instruction.method, data=d, se=F, ghost.reference=list(instruction.method="lecture"), ghost.line="gray")  + labs(title="Plot of Statsitical Analysis") + theme(plot.title = element_text(hjust = 0.5))
write.csv(d, "research/Statistical Framework/CSM Seed Grant/data/classroom_method.csv", row.names=F)
names(d)
names(d)[3] = "instruction.method"
write.csv(d, "research/Statistical Framework/CSM Seed Grant/data/classroom_method.csv", row.names=F)
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
self$options$out = "income"#
self$options$preds = c("a", "b")#
self$options$given = c("c", "d")
paste0(out, paste0(preds, collapse="+"), "|", paste0(given, collapse="+"))
out = "income"#
preds = c("a", "b")#
given = c("c", "d")#
paste0(out, paste0(preds, collapse="+"), "|", paste0(given, collapse="+"))
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
jmvtools::install("research/RPackages/glinmod")
setwd("research/RPackages/glinmod")
jmvtools::addAnalysis(name='modelcomp', title = "Model Comparison")
setwd("research/RPackages/glinmod")
setwd("glinmod")
jmvtools::install("")
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
d = read.csv("research/plant growth.csv")#
plant_growth = d
d = read.csv("research/plant growth.csv")
