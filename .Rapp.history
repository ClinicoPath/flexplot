d
hw = grep("Week", names(d), value=T)
d[,hw]
ncol(d[,hw])
require(fifer)#
d = read.csv("Dropbox/grades/intro")#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
ncol(d[,hw])
d[,hw]
require(fifer)#
d = read.csv("Dropbox/grades/intro")#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### conver to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}
d[,hw]
d = read.csv("Dropbox/grades/intro")#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
#
d[,hw]
d = read.csv("Dropbox/grades/intro")#
names(d) = subsetString(names(d), "..", 1)
hw = grep("Week", names(d), value=T)
d
d[,hw]
d$Week.14 = NULL
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
d[,hw]
d = read.csv("Dropbox/grades/intro")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
d$Week.14 = NULL#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
d[,hw]
d = read.csv("Dropbox/grades/intro")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
d$Week.14 = NULL#
hw = grep("Week", names(d), value=T)
#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
d[,hw]
d = read.csv("Dropbox/grades/intro")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
d$Week.14 = NULL#
hw = grep("Week", names(d), value=T)#
ncol(d[,hw])
#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
ncol(d[,hw])
d = read.csv("Dropbox/grades/intro")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
d$Week.14 = NULL#
hw = grep("Week", names(d), value=T)#
ncol(d[,hw])#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 10#
}
d
require(fifer)#
d = read.csv("Dropbox/grades/intro")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
d$Week.14 = NULL#
hw = grep("Week", names(d), value=T)#
ncol(d[,hw])#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 10#
}#
#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
#
d$total.score = (d$Homework + d$Final.Exam + d$Midterm)#
d$total.score
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)
d$total.score
#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 10#
}#
#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
#
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)/150#
d$total.score
head(d)
d[,c("Last.Name", "First.Name", "total.score")]
d = read.csv("Dropbox/grades/intro")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
d$Week.14 = NULL#
hw = grep("Week", names(d), value=T)#
d$Final.Exam[d$Last.Name=="Batie"] = 0#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 10#
}#
#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
#
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)/150#
d$total.score#
d[,c("Last.Name", "First.Name", "total.score")]
d$Univariate.Midterm[is.na(d$Univariate.Midterm)]
is.na(d$Univariate.Midterm)
d$Final.Exam[is.na(d$Final.Exam)]=0
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)/150
d[,c("Last.Name", "First.Name", "total.score")]
d = read.csv("Dropbox/grades/intro")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
d$Week.14 = NULL#
hw = grep("Week", names(d), value=T)#
d$Final.Exam[d$Last.Name=="Batie"] = 0#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 10#
}#
#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
d$Univariate.Midterm[is.na(d$Univariate.Midterm)]=0#
d$Final.Exam[is.na(d$Final.Exam)]=0#
#
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)/150#
d$total.score#
d[,c("Last.Name", "First.Name", "total.score")]
cut(d$letter.grade*100, c(0, 60, 63, 70, 73, 80, 83, 90, 93,))
cut(d$letter.grade*100, c(0, 60, 63, 70, 73, 80, 83, 90, 93,100))
cut(d$letter.grade*100, c(0, 60, 63, 70, 73, 80, 83, 90, 93,100), include.lowest=T)
?cut
cut(d$letter.grade*100, c(0, 60, 63, 70, 73, 80, 83, 90, 93,100), right=F)
cut(d$letter.grade*100, c(0, 60, 63, 67, 70, 73, 76, 80, 83, 86, 90, 93,100), right=F, labels=c("F", "D-", "D", "D+", "C-", "C", "C+", "B-", "B", "B+", "A-", "A"))
d$letter.grade
d$letter.grade = d$total.score
d$letter.grade
cut(d$letter.grade*100, c(0, 60, 63, 67, 70, 73, 76, 80, 83, 86, 90, 93,100), right=F, labels=c("F", "D-", "D", "D+", "C-", "C", "C+", "B-", "B", "B+", "A-", "A"))
d[,c("Last.Name", "First.Name", "total.score", "letter.grade")]
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)/150#
d$total.score#
d$letter.grade = d$total.score#
d$letter.grade = cut(d$letter.grade*100, c(0, 60, 63, 67, 70, 73, 76, 80, 83, 86, 90, 93,100), right=F, labels=c("F", "D-", "D", "D+", "C-", "C", "C+", "B-", "B", "B+", "A-", "A"))#
d[,c("Last.Name", "First.Name", "total.score", "letter.grade")]
d = read.csv("Dropbox/grades/univariate")
names(d) = subsetString(names(d), "..", 1)
hw = grep("Week", names(d), value=T)
d[,hw]
require(fifer)#
d = read.csv("Dropbox/grades/univariate")#
names(d) = subsetString(names(d), "..", 1)
hw = grep("Week", names(d), value=T)
d[,hw]
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 10#
}
d
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}
d = read.csv("Dropbox/grades/univariate")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
d[,hw]#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
d
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}
d$Univariate.Midterm[is.na(d$Univariate.Midterm)]=0#
d$Final.Exam[is.na(d$Final.Exam)]=0
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm+25)
d$total.score
require(fifer)#
d = read.csv("Dropbox/grades/univariate")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
d[,hw]#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
d#
#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
d$Univariate.Midterm[is.na(d$Univariate.Midterm)]=0#
d$Final.Exam[is.na(d$Final.Exam)]=0#
#
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm+25)#
d$total.score
d = read.csv("Dropbox/grades/univariate")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
d
d = read.csv("Dropbox/grades/finalexam.csv")
head(d)
names(d) = subsetString(names(d), "..", 1)
head(d)
names(d)
d = read.csv("Dropbox/grades/finalexam.csv", sep=",")
d
names(d) = subsetString(names(d), "..", 1)
names(d)
d = read.csv("Dropbox/grades/finalexam.csv", sep=",")#
names(d)
d = d[,c("Last.Name", "Question.ID", "Auto.Score")]
head(d)
tidyr::spread(d, Question.ID, Auto.Score)
cor(d[,2:ncol(d)])
d[,2:ncol(d)]
ncol(d)
d
d = tidyr::spread(d, Question.ID, Auto.Score)
cor(d[,2:ncol(d)])
cor(d[,2:ncol(d)], use="pairwise.complete.obs")
d = read.csv("Dropbox/grades/finalexam.csv", sep=",")#
d = d[,c("Last.Name", "Question.ID", "Auto.Score")]#
d = tidyr::spread(d, Question.ID, Auto.Score)#
d
cor.bests = 1:nrow(d)
cor.bests = 1:nrow(d)#
for (i in 1:nrow(d)){#
	person = d[,i]#
	diam = d[,1]#
	cor.bests[i] =cor(person, diam, use="pairwise.complete.obs")#
}
person
d[,i]
person = d[i,]
person
person = d[i,]
diam = d[1,]
cor.bests = 1:nrow(d)#
for (i in 1:nrow(d)){#
	person = d[i,]#
	diam = d[1,]#
	cor.bests[i] =cor(person, diam, use="pairwise.complete.obs")#
}
diam
person
cor(person, diam, use="pairwise.complete.obs")
is.numeric(person)
as.numeric(person)
person = as.numeric(d[i,])#
	diam = as.numeric(d[1,])#
	cor.bests[i] =cor(person, diam, use="pairwise.complete.obs")
cor.bests = 1:nrow(d)#
for (i in 1:nrow(d)){#
	person = as.numeric(d[i,])#
	diam = as.numeric(d[1,])#
	cor.bests[i] =cor(person, diam, use="pairwise.complete.obs")#
}
cor.bests
cor.bests = data.frame(person=d$Last.Name, correlation=1:nrow(d))#
for (i in 1:nrow(d)){#
	person = as.numeric(d[i,])#
	diam = as.numeric(d[1,])#
	cor.bests$correlation[i] =cor(person, diam, use="pairwise.complete.obs")#
}
cor.bests
cor.bests = cor.bests[order(cor.bests$correlation),]
cor.bests
d
she.got.wrong = which(diam==0)
she.got.wrong
they.got.wrong = which(person==0)
they.got.wrong
they.got.wrong %in% she.got.wrong
all(they.got.wrong %in% she.got.wrong)
d = read.csv("Dropbox/grades/finalexam.csv", sep=",")#
d = d[,c("Last.Name", "Question.ID", "Auto.Score")]#
d = tidyr::spread(d, Question.ID, Auto.Score)#
d#
cor(d[,2:ncol(d)], use="pairwise.complete.obs")#
#
cor.bests = data.frame(person=d$Last.Name, correlation=1:nrow(d), flagged=0)#
for (i in 1:nrow(d)){#
	person = as.numeric(d[i,])#
	diam = as.numeric(d[1,])#
	#### see if they got one right that she got wrong#
	#### all wrong she has are the same they got wrong#
	she.got.wrong = which(diam==0)#
	they.got.wrong = which(person==0)#
	### now flag it if they shared all the same wrong ones, but they got more#
	if (all(they.got.wrong %in% she.got.wrong) & length(they.got.wrong)>length(she.got.wrong)){#
		cor.bests$flagged[i]=1#
	}#
	cor.bests$correlation[i] =cor(person, diam, use="pairwise.complete.obs")#
}#
cor.bests = cor.bests[order(cor.bests$correlation),]#
cor.bests
d = read.csv("Dropbox/grades/finalexam.csv", sep=",")#
d = d[,c("Last.Name", "Question.ID", "Auto.Score")]#
d = tidyr::spread(d, Question.ID, Auto.Score)#
d#
cor(d[,2:ncol(d)], use="pairwise.complete.obs")#
#
cor.bests = data.frame(person=d$Last.Name, correlation=1:nrow(d), flagged=0)#
for (i in 1:nrow(d)){#
	person = as.numeric(d[i,])#
	diam = as.numeric(d[1,])#
	#### see if they got one right that she got wrong#
	#### all wrong she has are the same they got wrong#
	she.got.wrong = which(diam==0)#
	they.got.wrong = which(person==0)#
	### now flag it if they shared all the same wrong ones, but they got more#
	if (all(she.got.wrong %in% they.got.wrong ) & length(they.got.wrong)>length(she.got.wrong)){#
		cor.bests$flagged[i]=1#
	}#
	cor.bests$correlation[i] =cor(person, diam, use="pairwise.complete.obs")#
}#
cor.bests = cor.bests[order(cor.bests$correlation),]#
cor.bests
she.got.wrong
they.got.wrong
all(she.got.wrong %in% they.got.wrong )
d = read.csv("Dropbox/grades/finalexam.csv", sep=",")#
d = d[,c("Last.Name", "Question.ID", "Auto.Score")]#
d = tidyr::spread(d, Question.ID, Auto.Score)#
d#
cor(d[,2:ncol(d)], use="pairwise.complete.obs")#
#
cor.bests = data.frame(person=d$Last.Name, correlation=1:nrow(d), flagged=0)#
for (i in 1:nrow(d)){#
	person = as.numeric(d[i,])#
	diam = as.numeric(d[1,])#
	#### see if they got one right that she got wrong#
	#### all wrong she has are the same they got wrong#
	she.got.wrong = which(diam==0)#
	they.got.wrong = which(person==0)#
	### now flag it if they shared all the same wrong ones, but they got more#
	if (all(she.got.wrong %in% they.got.wrong )){#
		cor.bests$flagged[i]=1#
	}#
	cor.bests$correlation[i] =cor(person, diam, use="pairwise.complete.obs")#
}#
cor.bests = cor.bests[order(cor.bests$correlation),]#
cor.bests
d[d$person=="Priestley" | d$person == "Batie",]
d$person == "Batie"
d = read.csv("Dropbox/grades/finalexam.csv", sep=",")#
d = d[,c("Last.Name", "Question.ID", "Auto.Score")]#
d = tidyr::spread(d, Question.ID, Auto.Score)#
d
d[c(1,14),]
i=14
person = as.numeric(d[i,])
person
diam = as.numeric(d[1,])
diam
person = as.numeric(d[i,])
person
she.got.wrong = which(diam==0)
she.got.wrong
they.got.wrong = which(person==0)
they.got.wrong
person = as.numeric(d[i,])
person
she.got.wrong = which(diam==0)
diam
person==0
which(person==0)
diam
person
d = read.csv("Dropbox/grades/finalexam.csv", sep=",")#
d = d[,c("Last.Name", "Question.ID", "Auto.Score")]#
d = tidyr::spread(d, Question.ID, Auto.Score)#
d[c(1,14),]#
cor(d[,2:ncol(d)], use="pairwise.complete.obs")#
#
cor.bests = data.frame(person=d$Last.Name, correlation=1:nrow(d), flagged=0)#
i=14#
for (i in 1:nrow(d)){#
	person = as.numeric(d[i,])#
	diam = as.numeric(d[1,])#
	#### see if they got one right that she got wrong#
	#### all wrong she has are the same they got wrong#
	she.got.wrong = which(diam==0)#
	they.got.wrong = which(person==0)#
	### now flag it if they shared all the same wrong ones, but they got more#
	if (all(she.got.wrong %in% they.got.wrong )){#
		cor.bests$flagged[i]=1#
	}#
	cor.bests$correlation[i] =cor(person, diam, use="pairwise.complete.obs")#
}#
cor.bests = cor.bests[order(cor.bests$correlation),]#
cor.bests
d = read.csv("Dropbox/grades/finalexam.csv", sep=",")#
d = d[,c("Last.Name", "Question.ID", "Auto.Score")]#
d = tidyr::spread(d, Question.ID, Auto.Score)#
d[c(1,14),]#
cor(d[,2:ncol(d)], use="pairwise.complete.obs")#
#
cor.bests = data.frame(person=d$Last.Name, correlation=1:nrow(d), flagged=0)#
i=14#
for (i in 1:nrow(d)){#
	person = as.numeric(d[i,])#
	diam = as.numeric(d[1,])#
	#### see if they got one right that she got wrong#
	#### all wrong she has are the same they got wrong#
	she.got.wrong = which(diam==0)#
	they.got.wrong = which(person==0)#
	### now flag it if they shared all the same wrong ones, but they got more#
	if (all(they.got.wrong %in% she.got.wrong )){#
		cor.bests$flagged[i]=1#
	}#
	cor.bests$correlation[i] =cor(person, diam, use="pairwise.complete.obs")#
}#
cor.bests = cor.bests[order(cor.bests$correlation),]#
cor.bests
i=3
person = as.numeric(d[i,])
diam = as.numeric(d[1,])
person
she.got.wrong = which(diam==0)
they.got.wrong = which(person==0)
she.got.wrong
they.got.wrong
d = read.csv("Dropbox/grades/finalexam.csv", sep=",")#
d = d[,c("Last.Name", "Question.ID", "Auto.Score")]#
d = tidyr::spread(d, Question.ID, Auto.Score)#
d[c(1,14),]#
cor(d[,2:ncol(d)], use="pairwise.complete.obs")#
#
cor.bests = data.frame(person=d$Last.Name, correlation=1:nrow(d), flagged=0)#
i=14#
for (i in 1:nrow(d)){#
	person = as.numeric(d[i,])#
	diam = as.numeric(d[1,])#
	#### see if they got one right that she got wrong#
	#### all wrong she has are the same they got wrong#
	she.got.wrong = which(diam==0)#
	they.got.wrong = which(person==0)#
	### now flag it if they shared all the same wrong ones, but they got more#
	if (all(she.got.wrong %in% they.got.wrong )){#
		cor.bests$flagged[i]=1#
	}#
	cor.bests$correlation[i] =cor(person, diam, use="pairwise.complete.obs")#
}#
cor.bests = cor.bests[order(cor.bests$correlation),]#
cor.bests
length(person)
require(fifer)#
d = read.csv("Dropbox/grades/rm.csv")#
#
	#### get rid of junk in names#
names(d) = subsetString(names(d), "..", 1)#
d$Week.4 = NULL#
d$Benchmark = NULL#
d$Benchmark = NULL#
d$Benchmark = NULL#
#
d#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
#
d$Final.Exam = (d$Final.Exam/25)*15#
	#### give points for doing benchmarks#
d$benchmark = 5#
	##### loop through and drop lowest scores#
	i=1#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
#
d$total.score = (d$Homework + d$Final.Exam + d$Midterm + d$benchmark + 10)/90#
d#
#
require(fifer)#
d = read.csv("Dropbox/grades/intro")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
d$Week.14 = NULL#
hw = grep("Week", names(d), value=T)#
d$Final.Exam[d$Last.Name=="Batie"] = 0#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 10#
}#
#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
d$Univariate.Midterm[is.na(d$Univariate.Midterm)]=0#
d$Final.Exam[is.na(d$Final.Exam)]=0#
#
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)/150#
d$total.score#
d$letter.grade = d$total.score#
d$letter.grade = cut(d$letter.grade*100, c(0, 60, 63, 67, 70, 73, 76, 80, 83, 86, 90, 93,100), right=F, labels=c("F", "D-", "D", "D+", "C-", "C", "C+", "B-", "B", "B+", "A-", "A"))#
d[,c("Last.Name", "First.Name", "total.score", "letter.grade")]
require(fifer)#
d = read.csv("Dropbox/grades/rm.csv")#
#
	#### get rid of junk in names#
names(d) = subsetString(names(d), "..", 1)#
d$Week.4 = NULL#
d$Benchmark = NULL#
d$Benchmark = NULL#
d$Benchmark = NULL#
#
d#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
#
d$Final.Exam = (d$Final.Exam/25)*15#
	#### give points for doing benchmarks#
d$benchmark = 5#
	##### loop through and drop lowest scores#
	i=1#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
#
d$total.score = (d$Homework + d$Final.Exam + d$Midterm + d$benchmark + 10)/90#
d#
#
require(fifer)#
d = read.csv("Dropbox/grades/intro")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
d$Week.14 = NULL#
hw = grep("Week", names(d), value=T)#
#d$Final.Exam[d$Last.Name=="Batie"] = 0#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 10#
}#
#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
d$Univariate.Midterm[is.na(d$Univariate.Midterm)]=0#
d$Final.Exam[is.na(d$Final.Exam)]=0#
#
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)/150#
d$total.score#
d$letter.grade = d$total.score#
d$letter.grade = cut(d$letter.grade*100, c(0, 60, 63, 67, 70, 73, 76, 80, 83, 86, 90, 93,100), right=F, labels=c("F", "D-", "D", "D+", "C-", "C", "C+", "B-", "B", "B+", "A-", "A"))#
d[,c("Last.Name", "First.Name", "total.score", "letter.grade")]
require(fifer)#
d = read.csv("Dropbox/grades/univariate")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
d#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
d#
#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
d$Univariate.Midterm[is.na(d$Univariate.Midterm)]=0#
d$Final.Exam[is.na(d$Final.Exam)]=0#
#
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm+25)#
d$total.score
require(fifer)#
d = read.csv("Dropbox/grades/univariate")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
d#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
d#
#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
d$Univariate.Midterm[is.na(d$Univariate.Midterm)]=0#
d$Final.Exam[is.na(d$Final.Exam)]=0#
#
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)#
d$total.score
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)/75#
d$total.score
require(fifer)#
d = read.csv("Dropbox/grades/univariate")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
d
d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))
missing.vals = which(is.na(d[,hw[i]]))
missing.vals
d[missing.vals, hw[i]] = 0
max(d[,hw[i]])
require(fifer)#
d = read.csv("Dropbox/grades/univariate")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
d
i=1
max.score = max(d[,hw[i]])
max.score
require(fifer)#
d = read.csv("Dropbox/grades/univariate")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
d#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
d
d[,hw]
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}
d$Homework
d$Univariate.Midterm[is.na(d$Univariate.Midterm)]=0
d$Univariate.Midterm
d$Final.Exam[is.na(d$Final.Exam)]=0
d$Final.Exam
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)/85
d$total.score
require(fifer)#
d = read.csv("Dropbox/grades/univariate")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
d#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
d$Univariate.Midterm[is.na(d$Univariate.Midterm)]=0#
d$Final.Exam[is.na(d$Final.Exam)]=0#
#
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)/85#
d$total.score
d[,c("Last.Name", "First.Name", "Homework", "Final.Exam", "Univariate.Midterm","total.score", "letter.grade")]
require(fifer)#
d = read.csv("Dropbox/grades/univariate")#
names(d) = subsetString(names(d), "..", 1)#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
d#
#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert to numeric#
	d[,hw[i]] = as.numeric(as.character(d[,hw[i]]))#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
d$Univariate.Midterm[is.na(d$Univariate.Midterm)]=0#
d$Final.Exam[is.na(d$Final.Exam)]=0#
#
d$total.score = (d$Homework + d$Final.Exam + d$Univariate.Midterm)/85#
d$total.score#
d$letter.grade = d$total.score#
d$letter.grade = cut(d$letter.grade*100, c(0, 60, 63, 67, 70, 73, 76, 80, 83, 86, 90, 93,100), right=F, labels=c("F", "D-", "D", "D+", "C-", "C", "C+", "B-", "B", "B+", "A-", "A"))#
d[,c("Last.Name", "First.Name", "Homework", "Final.Exam", "Univariate.Midterm","total.score", "letter.grade")]
require(fifer)#
d = read.csv("Dropbox/grades/rm.csv")#
#
	#### get rid of junk in names#
names(d) = subsetString(names(d), "..", 1)#
d$Week.4 = NULL#
d$Benchmark = NULL#
d$Benchmark = NULL#
d$Benchmark = NULL#
#
d#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
#
d$Final.Exam = (d$Final.Exam/25)*15#
	#### give points for doing benchmarks#
d$benchmark = 5#
	##### loop through and drop lowest scores#
	i=1#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
#
d$total.score = (d$Homework + d$Final.Exam + d$Midterm + d$benchmark + 10)/90#
d
require(fifer)#
d = read.csv("Dropbox/grades/rm.csv")#
#
	#### get rid of junk in names#
names(d) = subsetString(names(d), "..", 1)#
d$Week.4 = NULL#
d$Benchmark = NULL#
d$Benchmark = NULL#
d$Benchmark = NULL#
#
d#
	#### get homework names#
hw = grep("Week", names(d), value=T)#
	#### loop through them succas to convert to 5 total#
for (i in 1:length(hw)){#
	#### convert NA to zero#
	missing.vals = which(is.na(d[,hw[i]]))#
	d[missing.vals, hw[i]] = 0#
#
	#### scale to total 5#
	max.score = max(d[,hw[i]])#
	d[,hw[i]] = d[,hw[i]]/max.score * 5#
}#
#
d$Final.Exam = (d$Final.Exam/25)*15#
	#### give points for doing benchmarks#
d$benchmark = 5#
	##### loop through and drop lowest scores#
	i=1#
for (i in 1:nrow(d)){#
	sorted.scores = sort(d[i,hw], decreasing=T)#
	d$Homework[i] = sum(sorted.scores[1:10])#
}#
#
d$total.score = (d$Homework + d$Final.Exam + d$Midterm + d$benchmark + 10)/90#
d$letter.grade = d$total.score#
d$letter.grade = cut(d$letter.grade*100, c(0, 60, 63, 67, 70, 73, 76, 80, 83, 86, 90, 93,100), right=F, labels=c("F", "D-", "D", "D+", "C-", "C", "C+", "B-", "B", "B+", "A-", "A"))#
d[,c("Last.Name", "First.Name", "total.score", "letter.grade")]
inches = 8:15#
weight = c(18, 21, 25, 28, 30, 32, 35, 37)#
#
plot(inches, weight)
predict(lm(weight~inches), list(inches=30))
install.packages("haven")
require(haven)
d = read.csv("Sales.sav")
get.wd()
getwd()
d = read.csv("Dropbox/Sales.sav")
require(foreign)
d = read.sav("Dropbox/Sales.sav")
require(haven)
d = read_sav("Dropbox/Sales.sav")
head(d)
write.csv(d, "Sales.csv")
write.csv(d, "Dropbox/Sales.csv")
write.csv(d, "Dropbox/Sales.csv", row.names=F)
?read_sav
d$customer
d$customer = factor(d$customer, levels=c(1,2), labels=c("Regular customer", "Preferred customer"))
d$customer
head(d)
d$support
d$support = factor(d$customer, levels=c(1,2,3,4), labels=c("< 1 Minute", "1-2 Minutes", "2-4 Minutes", "> 4 Minutes"))
d$region
d$industry
d$industry = factor(d$customer, levels=c(1,2,3), labels=c("Government", "Commercial", "Academic"))
require(haven)#
d = read_sav("Dropbox/Sales.sav")#
d$customer = factor(d$customer, levels=c(1,2), labels=c("Regular customer", "Preferred customer"))#
d$support = factor(d$customer, levels=c(1,2,3,4), labels=c("< 1 Minute", "1-2 Minutes", "2-4 Minutes", "> 4 Minutes"))#
d$region = factor(d$customer, levels=c(1,2,3,4), labels=c("North", "South", "East", "West"))#
d$industry = factor(d$customer, levels=c(1,2,3), labels=c("Government", "Commercial", "Academic"))#
head(d)
require(haven)#
d = read_sav("Dropbox/Sales.sav")#
d$customer = factor(d$customer, levels=c(1,2), labels=c("Regular customer", "Preferred customer"))#
d$support = factor(d$support, levels=c(1,2,3,4), labels=c("< 1 Minute", "1-2 Minutes", "2-4 Minutes", "> 4 Minutes"))#
d$region = factor(d$region, levels=c(1,2,3,4), labels=c("North", "South", "East", "West"))#
d$industry = factor(d$industry, levels=c(1,2,3), labels=c("Government", "Commercial", "Academic"))#
head(d)
write.csv(d, "Dropbox/Sales.csv", row.names=F)
require(fifer)#
clear()#
#jmvtools::install()#
#devtools::install()#
data(ToothGrowth)#
d = ToothGrowth#
require(glinmod)#
d$dose = factor(d$dose)#
glinmod::glinmod(len~supp+dose, data=d)
traceback()
options(warn=2)
glinmod::glinmod(len~supp+dose, data=d)
traceback()
require(fifer)#
clear()#
#jmvtools::install()#
#devtools::install()#
data(ToothGrowth)#
d = ToothGrowth#
require(glinmod)#
d$dose = factor(d$dose)#
glinmod::glinmod(len~supp+dose, data=d)#
traceback()#
f = len~supp+dose; data=d#
object = lm(f, data=d)
plot="all"
terms = attr(terms(object), "term.labels")
d = object$model#
	#### identify factors#
	if (length(terms)>1){#
		factors = names(which(unlist(lapply(d[,terms], is.factor))));#
		numbers = names(which(unlist(lapply(d[,terms], is.numeric))));#
	} else {#
		factors = terms[which(is.factor(d[,terms]))]#
		numbers = terms[which(is.numeric(d[,terms]))]#
	}
factors
levels = apply(d, 2, FUN=function(x) length(unique(x)))#
	#### if there's too few levels and it's not categorical#
	factors = !sapply(d, is.factor)#
	if (any(levels<5 & factors)){#
		cat("Note: one or more of your variables has less than 5 values, yet they're treated as numeric.\n\n")#
	}
x.names = names(d)[-1] #
	y.name = names(d)[1]
#### export residuals#
	d$residuals = residuals(object)#
	d$abs.res = abs(d$residuals)#
	d$fitted = fitted(object)
histo = ggplot2::ggplot(data=d, aes(x=residuals)) + geom_histogram(fill='lightgray', col='black') + theme_bw() + labs(x="Residuals", title="Histogram of Residuals")#
	if (length(numbers)>0){#
		#res.dep = ggplot2::ggplot(data=d, aes(x=fitted, y=residuals)) + geom_point() + geom_smooth(method="loess", se=F) + #
		#theme_bw() + labs(x="Fitted", y="Residuals", title="Residual Dependence Plot")#
		res.dep = flexplot(residuals~fitted, data=d) + labs(x="Fitted", y="Residuals", title="Residual Dependence Plot")#
	} else {#
		res.dep = NULL#
	}#
	if (length(unique(d$fitted))<7){#
	sl = flexplot(abs.res~fitted, data=d, method="lm", jitter=c(.2, 0))+ labs(x="fitted", y="Absolute Value of Residuals", title="S-L Plot")			#
	} else {#
	sl = flexplot(abs.res~fitted, data=d, method="lm")+ labs(x="fitted", y="Absolute Value of Residuals", title="S-L Plot")			#
	}
histo = ggplot2::ggplot(data=d, aes(x=residuals)) + geom_histogram(fill='lightgray', col='black') + theme_bw() + labs(x="Residuals", title="Histogram of Residuals")
require(tidyverse)
histo = ggplot2::ggplot(data=d, aes(x=residuals)) + geom_histogram(fill='lightgray', col='black') + theme_bw() + labs(x="Residuals", title="Histogram of Residuals")
if (length(numbers)>0){#
		#res.dep = ggplot2::ggplot(data=d, aes(x=fitted, y=residuals)) + geom_point() + geom_smooth(method="loess", se=F) + #
		#theme_bw() + labs(x="Fitted", y="Residuals", title="Residual Dependence Plot")#
		res.dep = flexplot(residuals~fitted, data=d) + labs(x="Fitted", y="Residuals", title="Residual Dependence Plot")#
	} else {#
		res.dep = NULL#
	}
if (length(unique(d$fitted))<7){#
	sl = flexplot(abs.res~fitted, data=d, method="lm", jitter=c(.2, 0))+ labs(x="fitted", y="Absolute Value of Residuals", title="S-L Plot")			#
	} else {#
	sl = flexplot(abs.res~fitted, data=d, method="lm")+ labs(x="fitted", y="Absolute Value of Residuals", title="S-L Plot")			#
	}
(plot=="all" | plot == "bivariate" ) & is.null(formula)
is.null(formula)
is.null(formula)
data = object$model#
		#### extract the terms from each model#
		terms = attr(terms(object), "term.labels")
##### extract variable names#
		variables = all.vars(formula(object))#
	    outcome = variables[1]#
	    predictors = variables[-1]#
	    ##### look for interactions and remove them#
		if (length(grep(":", terms))>0){#
			terms = terms[-grep(":", terms)]#
		}#
		##### look for polynomials and remove them#
		if (length(grep("^2", terms, fixed=T, value=T))>0){#
			terms = terms[-grep("^2", terms, fixed=T)]#
		}#
		#### figure out variable types#
		if (length(terms)>1){#
			numb = names(which(unlist(lapply(data[,terms], is.numeric))))#
			cat = names(which(!(unlist(lapply(data[,terms], is.numeric)))))#
		} else {#
			numb = ifelse(is.numeric(data[,terms]), terms, NA)#
			cat = ifelse(is.factor(data[,terms]), terms, NA)		#
		}
cat
if (length(terms)>4){#
			cat("Note: I can't plot more than four variables")#
		}
is.na(cat)
if ((!is.na(cat[1]) | length(cat[1])!=0) & (!is.na(cat[1]) | length(cat[1])!=0)){#
			### remove terms with first numb and first cat#
			t2 = terms[-which(terms==numb[1] | terms==cat[1])]#
			t2 = c(numb[1],cat[1], t2)#
		#### otherwise, if length is greater than #
		} else {#
			t2 = terms[1:min(length(terms), 4)]#
		}
devtools::install()
setwd("Dropbox/research/RPackages/glinmod")
devtools::install()
data(ToothGrowth)
d = ToothGrowth
require(glinmod)
d$dose = factor(d$dose)
glinmod::glinmod(len~supp+dose, data=d)
require(fifer)#
clear()#
#jmvtools::install()#
#devtools::install()#
#setwd("Dropbox/research/RPackages/glinmod")#
data(ToothGrowth)#
d = ToothGrowth#
require(glinmod)#
d$dose = factor(d$dose)#
glinmod::glinmod(len~supp+dose, data=d)
